from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from config import BOT_TOKEN
from database import Database
from keyboards import main_menu, profile_keyboard
import os
from aiogram.types import InputFile

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    db.add_user(message.from_user.id, message.from_user.username or '')
    text = ("–•–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç—É –≤ HUSTLE TRADE? –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–µ–π—à–∏–µ –∫—É—Ä—Å—ã –Ω–∞ –æ–±–º–µ–Ω –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á—ë—Ç ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª –Ω–∏–∂–µ\n\n"
            "–ï—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º, —Å–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ¬´NEWHUSTLER¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 30%-–æ–π —Å–∫–∏–¥–∫–∏: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–º–æ–∫–æ–¥¬ª –∏ –≤–≤–µ–¥–∏ –µ–≥–æ!")
    await message.answer(text, reply_markup=main_menu())

@dp.message_handler(lambda message: message.text == "–ö—É–ø–∏—Ç—å")
async def buy(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è ¬´–ö—É–ø–∏—Ç—å¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è")

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–º–æ–∫–æ–¥")
async def promo(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–∫–∏–¥–∫—É.")

@dp.message_handler(lambda message: message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message):
    db.add_user(message.from_user.id, message.from_user.username or '')
    user = db.get_user(message.from_user.id)
    caption = (f"üë§ –¢–≤–æ–π ID: {user['user_id']}\n\n"
               f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: {user['username']}\n\n"
               f"ü•ä –ö—É–ø–ª–µ–Ω–æ –∫—Ä–∏–ø—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\nXMR: 0.00000000\nLTC: 0.00000000\nBTC: 0.00000000\n\n"
               f"üí≥ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {user['discount']} %\n\n"
               f"üí∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.\n\n"
               "üìú –ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞\nü§ñ –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏")
    banner_path = os.path.join('assets', 'banner.jpg')
    if os.path.exists(banner_path):
        photo = InputFile(banner_path)
        await message.answer_photo(photo, caption=caption, reply_markup=profile_keyboard())
    else:
        await message.answer(caption, reply_markup=profile_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'back')
async def process_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    data = callback_query.data
    if data == 'contact':
        await bot.send_message(callback_query.from_user.id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏: @your_operator_username")
    elif data == 'channel':
        await bot.send_message(callback_query.from_user.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/your_channel")
    elif data == 'reviews':
        await bot.send_message(callback_query.from_user.id, "–û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.")
    elif data == 'earn':
        await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")
    elif data == 'promo':
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç, –∏ –º—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º.")
    else:
        await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
